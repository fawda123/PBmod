tmp <- read.dbf('L:/Public/mbeck/EFDC/GIS/toimport.txt')
tmp <- read.table('L:/Public/mbeck/EFDC/GIS/toimport.txt')
tmp <- read.table('L:/Public/mbeck/EFDC/GIS/toimport/pb_grid_mb.txt')
tmp <- read.table('L:/Public/mbeck/EFDC/GIS/pb_grid_mb/toimport.txt')
head(tmp)
plot(V5 ~ V4, tmp)
library(foreign)
library(tidyverse)
tmp <- read.table('L:/Public/mbeck/EFDC/GIS/pb_grid_mb/toimport.txt') %>%
select(V4, V5) %>%
rename(
Latitude = V5,
Longitude = V4
)
write.table(tmp, 'C:/Users/mbeck/Desktop/tmp.txt')
write.table(tmp, 'C:/Users/mbeck/Desktop/tmp.txt', quote = F, row.names  = F)
write.table(tmp, 'C:/Users/mbeck/Desktop/tmp.txt', quote = F, row.names  = F, sep = '\t')
library(spatial)
coodtinates(tmp <- tmp
coordinates(tmp) <- tmp
library(sp)
coordinates(tmp) <- tmp
plot(tmp)
library(maptools)
writeSpatialShape(x, 'M:/GIS/EFDC/delete_me.shp')
writeSpatialShape(tmp, 'M:/GIS/EFDC/delete_me.shp')
class(tmp)
head(tmp)
?writeSpatialShape
writeSpatialShape(tmp, 'M:/GIS/EFDC/delete_me.shp')
writeSpatialShape(tmp, 'M:/GIS/EFDC/delete_me')
library(sf)
install.packages('sf')
writeSpatialShape(tmp, 'M:/GIS/EFDC/delete_me')
library(sf)
?st_read)
?st_read
head(tmp)
tmp$Longitude <- NULL
library(foreign)
library(tidyverse)
tmp <- read.table('L:/Public/mbeck/EFDC/GIS/pb_grid_mb/toimport.txt')
head(tmp)
library(foreign)
library(tidyverse)
tmp <- read.table('L:/Public/mbeck/EFDC/GIS/pb_grid_mb/toimport.txt') %>%
rename(
Latitude = V5,
Longitude = V4
)
write.table(tmp, 'C:/Users/mbeck/Desktop/tmp.txt', quote = F, row.names  = F, sep = '\t')
library(plotly)
library(tidyverse)
library(raster)
library(fields)
library(gridExtra)
library(maptools)
rst <- raster('M:/GIS/EFDC/pb_gom_lo_utm')
chk <- coordinates(rst)
vals <- values(rst)
chk <- chk[!is.na(vals), ]
vals <- na.omit(vals)
dat <- data.frame(chk, vals, x, stringsAsFactors = F)
dat <- data.frame(chk, vals, stringsAsFactors = F)
names(dat) <- c('long', 'lat', 'depth')
dim(dat)
head(dat)
dat <- data.frame(chk, vals, stringsAsFactors = F) %>%
mutate(depth = round(depth, 3))
rst <- raster('M:/GIS/EFDC/pb_gom_lo_utm')
chk <- coordinates(rst)
vals <- values(rst)
chk <- chk[!is.na(vals), ]
vals <- na.omit(vals)
dat <- data.frame(chk, vals, stringsAsFactors = F) %>%
mutate(depth = round(depth, 3))
dat <- data.frame(chk, vals, stringsAsFactors = F)
head(dat)
write.table(dat, 'L:/Public/mbeck/EFDC/GIS/deps.txt', sep = '\s', quote = F, row.names = F)
write.table(dat, 'L:/Public/mbeck/EFDC/GIS/deps.txt', sep = '\\s', quote = F, row.names = F)
dat <- data.frame(chk, vals, stringsAsFactors = F) %>%
mutate(vals = round(vals, 3))
names(dat) <- c('long', 'lat', 'depth')
head(dat)
tail(dat)
?write.table
write.table(dat, 'L:/Public/mbeck/EFDC/GIS/deps.txt', sep = ' ', quote = F, row.names = F, col.names = F)
library(plotly)
library(tidyverse)
library(raster)
library(fields)
library(gridExtra)
library(maptools)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
plot(rst)
grd <- readShapePoly('M:/GIS/EFCF/pg_grd_new.shp')
?readShapePoly
?readShapeSpatial
library(maptools)
?readShapeSpatial
grd <- readShapeSpatial('M:/GIS/EFCF/pg_grd_new.shp')
grd <- readShapeSpatial('M:/GIS/EFCF/pg_grd_new')
grd <- readShapeSpatial('M:/GIS/EFDC/pg_grd_new')
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grd_new')
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grd_new.shp')
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp')
plot(grd)
?extract
library(tidyverse)
library(raster)
library(maptools)
dim(grd)
?extract
tmp <- extract(rst, grd)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
grd <- readShapeSpatial('M:/GIS/EFCF/pg_grd_new.shp')
tmp <- extract(rst, grd)
head(tmp)
class(tmp)
length(tmp)
tmp <- extract(rst, grd, fun = 'mean', na.rm = TRUE)
tmp <- extract(rst, grd, fun = mean, na.rm = TRUE)
class(tmp)
tmp
range(tmp)
head(tmp)
head(data.frame(grd))
dim(data.frame(grd))
data.frame(grd) <- mutate(data.frame(grd),
depth = tmp[,1]
)
mutate(data.frame(grd),
depth = tmp[,1]
)
names(grd)
class(grd)
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
plot(grd)
toplo <- fortify(grd)
head(toplo)
head(grd)
dim(toplo)
?fortify
toplo <- fortify(grd, data = data.frame(grd))
head(toplo)
class(toplo)
unique(grd$j)
unique(grd@data$j)
unique(grd@data$J)
unique(grd@data$L)
toplo <- fortify(grd, region = 'L')
head(toplo)
unique(toplo$id)
toplo <- fortify(grd, region = 'L') %>%
left_join(grd@data, by = 'L')
deps <- grd@data %>%
data.frame %>%
select(L, depth)
deps <- grd@data %>%
select(L, depth)
deps <- grd@data
class(deps)
head(deps)
deps <- select(grd@data, L, depth)
deps <- dplyr::select(grd@data, L, depth)
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'L')
head(toplo)
deps <- dplyr::select(grd@data, L, depth) %>%
rename(id = L)
toplo <- fortify(grd, region = 'id') %>%
left_join(deps, by = 'id')
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
deps <- dplyr::select(grd@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
head(toplo)
ggplot(toplo) +
aes(long, lat, group = group, fill = depth) +
geom_polygon() +
geom_path(color="white") +
coord_equal()
ggplot(toplo) +
aes(long, lat, group = group, fill = depth) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer(palette = 'Set2') +
theme_bw()
ggplot(toplo) +
aes(long, lat, group = group, fill = depth) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_distiller(palette = 'Set2') +
theme_bw()
ggplot(toplo) +
aes(long, lat, group = group, fill = depth) +
geom_polygon() +
geom_path(color="grey") +
coord_equal() +
scale_fill_distiller(palette = 'Spectral') +
theme_minimal()
ggplot(toplo) +
aes(long, lat, group = group, fill = depth) +
geom_polygon() +
# geom_path(color="grey") +
coord_equal() +
scale_fill_distiller(palette = 'Spectral') +
theme_minimal()
deps <- dplyr::select(grd@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
p <- ggplot(toplo) +
aes(long, lat, group = group, fill = depth) +
geom_polygon() +
# geom_path(color="grey") +
coord_equal() +
scale_fill_distiller(palette = 'Spectral') +
theme_minimal()
library(ggplotly)
library(plotly)
ggplotly(p)
head(toplo)
# get raster
rast <- raster('M:/GIS/EFDC/pb_gom_full')
# convert to matrix format
vals <- -1 * values(rast)
crds <- coordinates(rast)
dat <- data.frame(crds, vals) %>%
spread(x, vals) %>%
dplyr::select(-y) %>%
as.matrix
# for changing the aspect ratio
scene <- list(
aspectmode = 'manual',
aspectratio = list(x = 1, y = 1, z = 0.1),
scene = list(bgcolor = "rgb(244, 244, 248)")
)
# create plot
depth_m <- dat
p1 <- plot_ly(z = ~depth_m) %>%
add_surface() %>%
layout(scene = scene)
p1
rst <- raster('M:/GIS/EFDC/pb_hi')
chk <- coordinates(rst)
vals <- values(rst)
chk <- chk[!is.na(vals), ]
vals <- na.omit(vals)
dat <- data.frame(chk, vals, stringsAsFactors = F)
names(dat) <- c('long', 'lat', 'depth')
mythm <- theme_minimal() +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
axis.ticks.x = element_line(),
axis.ticks.y = element_line(),
axis.ticks.length = unit(.1, "cm"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
p <- ggplot(dat, aes(x = long, y = lat, fill = `Depth (m)`)) +
geom_tile() +
mythm +
coord_equal(ratio = 1) +
scale_fill_distiller(palette = 'Spectral')
p
head(dat)
rst <- raster('M:/GIS/EFDC/pb_hi')
chk <- coordinates(rst)
vals <- values(rst)
chk <- chk[!is.na(vals), ]
vals <- na.omit(vals)
dat <- data.frame(chk, vals, stringsAsFactors = F)
names(dat) <- c('long', 'lat', 'Depth (m)')
mythm <- theme_minimal() +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
axis.ticks.x = element_line(),
axis.ticks.y = element_line(),
axis.ticks.length = unit(.1, "cm"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
p <- ggplot(dat, aes(x = long, y = lat, fill = `Depth (m)`)) +
geom_tile() +
mythm +
coord_equal(ratio = 1) +
scale_fill_distiller(palette = 'Spectral')
p
plot(grd)
writeShapeSpatial(grd, 'M:/GIS/EFCF/pg_grd_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFCF/pg_grd_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grd_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grd_new.shp')
grd@proj4string
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp')
grd@proj4string
?writeSpatialShape
head(grd@data)
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83')
)
plot(grd)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83'))
deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grid_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83'))
grd@proj4string
library(rgdal)
?writeOGR
writeOGRgrd(td, 'M:/GIS/EFDC/pb_grid_new2.shp', driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2' driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2', driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83'))
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp', proj4string = CRS('+proj=utm +zone=16 +datum=WGS84'))
?readOGR
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
class(grd)
grd@proj4string
writeOGR(grd, 'M:/GIS/EFDC', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
library(tidyverse)
library(raster)
library(rgdal)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
# shapefile exported from cvl grid
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
# extract depths for each efdc grid cell from the depth raster
deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
# add the depths to spatial polygons data frame
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
# write file
writeOGR(grd, 'M:/GIS/EFDC', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
# add the depths to spatial polygons data frame
grd@data <- mutate(data.frame(grd),
depth = deps[,1]
)
writeOGR(grd, 'M:/GIS/EFDC', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
pg_grid <- grd
save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
deps <- dplyr::select(pb_grid@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
pb_grid <- grd
save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
deps <- dplyr::select(pb_grid@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
lxly <- readLines('EFDC/lxly.inp')
head(lxly)
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
head(grd)
head(grd@data)
head(pb_grid@data)
head(lxly)
lxlyhd <- lxly[1:4]
lxly <- readLines('EFDC/lxly.inp')
lxlyhd <- lxly[1:4]
lxly <- lxly %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
lxly <- readLines('EFDC/lxly.inp')
lxlyhd <- lxly[1:4]
lxly <- lxly[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
head(lxly)
dxdy <- readLines('EFDC/dxdy.inp')
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxly[1:3]
dxdy <- dxdy[-c(1:3)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
dxdyhd <- dxdy[1:3]
dxdy <- dxdy[-c(1:3)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:3]
dxdy <- dxdy[-c(1:3)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
head(dxdy)
dim(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
dimdxdy)
dim(dxdy)
dim(pb_grid@data)
head((pb_grid@data))
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame %>%
rename(
I = V2,
J = V3
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid@data)
str(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
as.data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
head(dxdy)
str(dxdy)
data(pb_grid)
pb_grid <- pb_grid@data %>%
select(I, J, depths) %>%
mutate(
I = as.character(I),
J = as.character(J),
depths = as.character(depths)
)
data(pb_grid)
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depths) %>%
mutate(
I = as.character(I),
J = as.character(J),
depths = as.character(depths)
)
data(pb_grid)
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
head(pb_grid)
