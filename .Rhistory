left_join(., pb_grid, by = c('I', 'J'))
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I,
I = as.character(I),
J = 2 + J,
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(deps)
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
str(deps)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(deps = as.numeric(deps))
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(depth = as.numeric(depth))
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
str(deps)
ggplot(deps, aes(x = J, y = I)) +
geom_point()
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(
I = as.numeric(I),
J = as.numeric(J),
depth = as.numeric(depth)
)
ggplot(deps, aes(x = J, y = I)) +
geom_point()
ggplot(deps, aes(x = J, y = I)) +
geom_point() +
scale_y_reverse()
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point() +
scale_y_reverse()
ggplot(deps, aes(x = J, y = I, colour = depth)) +
geom_point() +
scale_y_reverse() +
scale_colour_distiller(palette = 'Set3')
ggplot(deps, aes(x = J, y = I, colour = depth)) +
geom_point() +
scale_y_reverse() +
scale_colour_distiller(palette = 'Set2')
head(dxdy)
library(tidyverse)
library(raster)
library(rgdal)
######
# estimate average depth in each ij grid cel for EFDC grid
# # bathymetry raster, created manually in arcgis
# rst <- raster('M:/GIS/EFDC/pb_gom_full')
#
# # shapefile exported from cvl grid
# grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
#
# # extract depths for each efdc grid cell from the depth raster
# deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
#
# # add the depths to spatial polygons data frame
# grd@data <- mutate(data.frame(grd),
#   depth = deps[,1]
# )
#
# # save
# pb_grid <- grd
# save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
# format depth data from shapefile
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I, # I is shifted in shapeifle
I = as.character(I),
J = 2 + J, # J is shifted in shapefile
J = as.character(J),
depth = as.character(depth)
)
# import dxdy file with no depth data
dxdy <- readLines('EFDC/dxdy.inp')
# format for merge
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
# arrange depths in pb_grid by i, j valeus in dxdy
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
# fill depths in dxdy with the values in deps, correct order
# first column is depht, second is bottom depth (negative)
dxdy$X6 <- deps$depth
dxdy$X7 <- paste0('-', deps$depth)
head(dxdy)
dxdy <- apply(dxdy, 1, paste, collapse = '  ')
dxdy
dxdy <- c(dxdyhd, dxdy)
head(dxdy)
writeLines(dxdy, 'EFDC/dxdydep.inp')
# import dxdy file with no depth data
dxdy <- readLines('EFDC/dxdydep.inp')
# format for merge
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3,
Depth = X6
) %>%
mutate(
I = as.numeric(I),
J = ax.numeric(J),
Depth = as.numeric(Depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
head(dxd&y)
head(dxd&y)
head(dxdy)
dxdyin = 'EFDC/dxdy.inp'
# import dxdy file
dxdy <- readLines(dxdyin)
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
library(tidyverse)
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
head(dxdy)
sal
sig = 5
sal = 23
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
salt
dim(salt)
out <- cbind(dxdy, salt)
head(out)
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig)), .)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .)
head(out)
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.)
head(out)
hds <- c(
'C       SALT.inp      PENSACOLA BAY      PPT',
'C',
'C              I       J       Lay 1   Lay 2   Lay 3   Lay 4   Lay 5   Lay 6   Lay 7   Lay 8   Lay 9   Lay 10',
'C'
)
hds
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
# salt matrix
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.) %>%
apply(., 1, paste, collapse = '\t') %>%
unlist
# import dxdy file
dxdy <- readLines(dxdyin)
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
# salt matrix
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.) %>%
apply(., 1, paste, collapse = '\t') %>%
unlist
out
out[1]
out[]
#' Setup SALT.INP
#'
#' @param dxdyin chr string for input dxdy grid file
#' @param sig numeric for number of sigma layers
#' @param sal numeric for starting salinity value, PPT
#' @param outfl chr string for name of output file to save
#'
#' @import dplyr
#'
#' @return Nothing
getsalt <- function(dxdyin = 'EFDC/dxdy.inp', sig = 5,  sal = 23, outfl = 'EFDC/SALT.INP'){
# import dxdy file
dxdy <- readLines(dxdyin)
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
# salt matrix
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
# headers
hds <- c(
'C       SALT.inp      PENSACOLA BAY      PPT',
'C',
'C              I       J       Lay 1   Lay 2   Lay 3   Lay 4   Lay 5   Lay 6   Lay 7   Lay 8   Lay 9   Lay 10',
'C'
)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.) %>%
apply(., 1, paste, collapse = '\t') %>%
unlist %>%
c(hds, .)
# save
writeLines(out, outfl)
}
getsalt()
getsalt(sal = 124123)
getsalt()
source('M:/docs/PBmod/R/getsalt.R')
source('M:/docs/PBmod/R/getij.R')
getsalt(outfl = NULL)
library(tidyverse)
library(raster)
library(rgdal)
source('R/funcs.R')
library(tidyverse)
library(raster)
library(rgdal)
source('R/*.R')
library(tidyverse)
library(raster)
library(rgdal)
source('R/')
library(tidyverse)
library(raster)
library(rgdal)
source('R/funcs.R')
getsalt(outfl = NULL)
source('M:/docs/PBmod/R/funcs.R')
getsalt(outfl = NULL)
source('M:/docs/PBmod/R/funcs.R')
getsalt(outfl = NULL)
source('M:/docs/PBmod/R/funcs.R')
source('M:/docs/PBmod/R/funcs.R')
source('M:/docs/PBmod/R/funcs.R')
getinp(dxdyin = 'EFDC/dxdy.inp', sig = 5, val = 14, outfl = 'EFDC/TEMP.INP',
frstrow = 'C       TEMP.INP      PENSACOLA BAY, C')
getinp(dxdyin = 'EFDC/dxdy.inp', sig = 5, val = 23, outfl = 'EFDC/SALT.INP',
frstrow = 'C       SALT.INP      PENSACOLA BAY, PPT')
getinp(dxdyin = 'EFDC/dxdy.inp', sig = 5, val = 0, outfl = 'EFDC/DYE.INP',
frstrow = 'C       DYE.INP      PENSACOLA BAY, PPT')
data(pb_grid)
dim(pb_grid)
qser <- readLines('C:/Users/mbeck/Desktop/Pbay_wsecal_v4/QSER.INP')
dat <- strsplit(dat, '\\s+')
dat <- strsplit(qser, '\\s+')
lapply(dat, lenght)
lapply(dat, length)
dat <- strsplit(qser, '\\s+') %>%
lapply(., length) %>%
unlist
unique(dat)
head(dat)
head(qser)
head(qser, 10)
head(qser, 15)
head(qser, 25)
dat <- strsplit(qser, '\\t') %>%
lapply(., length) %>%
unlist
head(dat)
table(dat)
dat[1:14]
dat[1:15]
which(dat == 5)
qser[which(dat == 5)]
qser[which(dat == 7)]
qser_pts <- readOGR(dsn = 'M:/GIS/EFDC'"', layer = 'qser_pts')
qser_pts <- readOGR(dsn = 'M:/GIS/EFDC'"', layer = 'qser_pts')
qser_pts <- readOGR(dsn = 'M:/GIS/EFDC', layer = 'qser_pts')
plot(qser_pts)
qser_pts <- readOGR(dsn = 'M:/GIS/EFDC', layer = 'qser_pts')
save(qser_pts, file = 'data/qser_pts.RData', compress = 'xz')
data(pb_grid)
data(qser_pts)
deps <- dplyr::select(pb_grid@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(pb_grid, region = 'L') %>%
left_join(deps, by = 'id')
head(toplo)
pts <- qser_pts %>%
data.frame
head(pts)
qser_pts <- readOGR(dsn = 'M:/GIS/EFDC', layer = 'qser_pts')
save(qser_pts, file = 'data/qser_pts.RData', compress = 'xz')
data(pb_grid)
data(qser_pts)
deps <- dplyr::select(pb_grid@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(pb_grid, region = 'L') %>%
left_join(deps, by = 'id')
pts <- qser_pts %>%
data.frame %>%
select(coords.x1, coords.x2, descript, Type)
p <- ggplot(toplo) +
aes(long, lat, group = group)
p
ggplot(toplo) +
aes(long, lat, group = group) +
geom_polygon()
ggplot(toplo) +
aes(long, lat, group = group) +
geom_path(color="darkgrey")
pts <- qser_pts %>%
data.frame %>%
dplyr::select(coords.x1, coords.x2, descript, Type)
pts <- qser_pts %>%
data.frame %>%
dplyr::select(coords.x1, coords.x2, descrip, Type)
head(pts)
ggplot(toplo) +
aes(long, lat, group = group) +
geom_path(color="darkgrey") +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, fill = Type)) +
coord_equal() +
theme_minimal()
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, fill = Type)) +
coord_equal() +
theme_minimal()
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type)) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top')
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top')
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_label_repel(
data = pts,
data = pts, aes(x = coords.x1, y = coords.x2, label = descript) +
point.padding = grid::unit(0.4, "lines")
)
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_label_repel(
data = pts,
data = pts, aes(x = coords.x1, y = coords.x2, label = descript),
point.padding = grid::unit(0.4, "lines")
)
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_label_repel(
data = pts,
aes(x = coords.x1, y = coords.x2, label = descript),
point.padding = grid::unit(0.4, "lines")
)
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_label_repel(
data = pts,
aes(x = coords.x1, y = coords.x2, label = descrip),
point.padding = grid::unit(0.4, "lines")
)
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_text_repel(
data = pts,
aes(x = coords.x1, y = coords.x2, label = descrip),
point.padding = grid::unit(0.4, "lines")
)
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_text_repel(
data = pts,
aes(x = coords.x1, y = coords.x2, label = descrip),
point.padding = grid::unit(0.4, "lines"), size = 4
)
ggplot() +
geom_path(data = toplo, color="darkgrey", aes(long, lat, group = group)) +
geom_point(data = pts, aes(x = coords.x1, y = coords.x2, colour= Type), size = 6, alpha = 0.8) +
coord_equal() +
theme_minimal() +
theme(legend.position = 'top', axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggrepel::geom_text_repel(
data = pts,
aes(x = coords.x1, y = coords.x2, label = descrip),
point.padding = grid::unit(0.4, "lines"), size = 2
)
qser_pts <- readOGR(dsn = 'M:/GIS/EFDC', layer = 'qser_pts')
save(qser_pts, file = 'data/qser_pts.RData', compress = 'xz')
pts
pts <- qser_pts %>%
data.frame %>%
dplyr::select(coords.x1, coords.x2, I, J, descrip, Type)
pts
View(pts)
pts <- qser_pts %>%
data.frame
head(pts)
pts <- qser_pts %>%
data.frame %>%
dplyr::select(I, J, NS, descrip)
pts
11000000/60
11000000/(60 * 24)
11000000/(60 * 24 * 7)
field_pts <- readOGR(dsn = 'M:/GIS/EFDC', layer = 'field_pts')
save(field_pts, file = 'data/field_pts.RData', compress = 'xz')
data(field_pts)
field_pts <- readOGR(dsn = 'M:/GIS/EFDC', layer = 'field_pts')
save(field_pts, file = 'data/field_pts.RData', compress = 'xz')
View(data.frame(field_pts))
View(data.frame(field_pts[, c(3, 4)]))
View(data.frame(field_pts)[, c(3, 4)])
data.frame(field_pts)[, c(3, 4)]
View(data.frame(field_pts))
