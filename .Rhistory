dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame %>%
rename(
I = V2,
J = V3
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid@data)
str(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
as.data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
head(dxdy)
str(dxdy)
data(pb_grid)
pb_grid <- pb_grid@data %>%
select(I, J, depths) %>%
mutate(
I = as.character(I),
J = as.character(J),
depths = as.character(depths)
)
data(pb_grid)
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depths) %>%
mutate(
I = as.character(I),
J = as.character(J),
depths = as.character(depths)
)
data(pb_grid)
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
head(pb_grid)
library(tidyverse)
library(raster)
library(rgdal)
######
# estimate average depth in each ij grid cel for EFDC grid
# # bathymetry raster, created manually in arcgis
# rst <- raster('M:/GIS/EFDC/pb_gom_full')
#
# # shapefile exported from cvl grid
# grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
#
# # extract depths for each efdc grid cell from the depth raster
# deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
#
# # add the depths to spatial polygons data frame
# grd@data <- mutate(data.frame(grd),
#   depth = deps[,1]
# )
#
# # save
# pb_grid <- grd
# save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
head(dxdy)
#
deps <- dplyr::select(dxdy, I, J)
str(deps)
str(dxdy)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., deps, by = c('I', 'J'))
head(deps)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(Deps)
head(deps)
head(pb_grid)
pb_grid <- pb_grid@data
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data
head(pb_grid)
head(dxdy)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
View(pb_grid)
View(dxdy)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(deps)
View(deps)
dim(deps)
dim(dxdy)
dim(pb_grid)
head(pb_grid)
pb_grid(depth)
pb_grid$depth
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth)
head(pb_grid)
range(pb_grid$i)
str(pb_grid)
range(pb_grid$I)
range(dxdy$I)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
mutate(
I = as.numeric(I),
J = as.numeric(J)
)
head(dxdy)
range(dxdy$I)
range(dxdy$J)
range(pb_grid$I)
range(pb_grid$J)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I,
I = as.character(I),
J = 2 + J,
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I,
I = as.character(I),
J = 2 + J,
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(deps)
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
str(deps)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(deps = as.numeric(deps))
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(depth = as.numeric(depth))
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
str(deps)
ggplot(deps, aes(x = J, y = I)) +
geom_point()
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(
I = as.numeric(I),
J = as.numeric(J),
depth = as.numeric(depth)
)
ggplot(deps, aes(x = J, y = I)) +
geom_point()
ggplot(deps, aes(x = J, y = I)) +
geom_point() +
scale_y_reverse()
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point() +
scale_y_reverse()
ggplot(deps, aes(x = J, y = I, colour = depth)) +
geom_point() +
scale_y_reverse() +
scale_colour_distiller(palette = 'Set3')
ggplot(deps, aes(x = J, y = I, colour = depth)) +
geom_point() +
scale_y_reverse() +
scale_colour_distiller(palette = 'Set2')
head(dxdy)
library(tidyverse)
library(raster)
library(rgdal)
######
# estimate average depth in each ij grid cel for EFDC grid
# # bathymetry raster, created manually in arcgis
# rst <- raster('M:/GIS/EFDC/pb_gom_full')
#
# # shapefile exported from cvl grid
# grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
#
# # extract depths for each efdc grid cell from the depth raster
# deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
#
# # add the depths to spatial polygons data frame
# grd@data <- mutate(data.frame(grd),
#   depth = deps[,1]
# )
#
# # save
# pb_grid <- grd
# save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
# format depth data from shapefile
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I, # I is shifted in shapeifle
I = as.character(I),
J = 2 + J, # J is shifted in shapefile
J = as.character(J),
depth = as.character(depth)
)
# import dxdy file with no depth data
dxdy <- readLines('EFDC/dxdy.inp')
# format for merge
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
# arrange depths in pb_grid by i, j valeus in dxdy
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
# fill depths in dxdy with the values in deps, correct order
# first column is depht, second is bottom depth (negative)
dxdy$X6 <- deps$depth
dxdy$X7 <- paste0('-', deps$depth)
head(dxdy)
dxdy <- apply(dxdy, 1, paste, collapse = '  ')
dxdy
dxdy <- c(dxdyhd, dxdy)
head(dxdy)
writeLines(dxdy, 'EFDC/dxdydep.inp')
# import dxdy file with no depth data
dxdy <- readLines('EFDC/dxdydep.inp')
# format for merge
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3,
Depth = X6
) %>%
mutate(
I = as.numeric(I),
J = ax.numeric(J),
Depth = as.numeric(Depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
head(dxd&y)
head(dxd&y)
head(dxdy)
dxdyin = 'EFDC/dxdy.inp'
# import dxdy file
dxdy <- readLines(dxdyin)
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
library(tidyverse)
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
head(dxdy)
sal
sig = 5
sal = 23
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
salt
dim(salt)
out <- cbind(dxdy, salt)
head(out)
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig)), .)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .)
head(out)
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.)
head(out)
hds <- c(
'C       SALT.inp      PENSACOLA BAY      PPT',
'C',
'C              I       J       Lay 1   Lay 2   Lay 3   Lay 4   Lay 5   Lay 6   Lay 7   Lay 8   Lay 9   Lay 10',
'C'
)
hds
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
# salt matrix
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.) %>%
apply(., 1, paste, collapse = '\t') %>%
unlist
# import dxdy file
dxdy <- readLines(dxdyin)
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
# salt matrix
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.) %>%
apply(., 1, paste, collapse = '\t') %>%
unlist
out
out[1]
out[]
#' Setup SALT.INP
#'
#' @param dxdyin chr string for input dxdy grid file
#' @param sig numeric for number of sigma layers
#' @param sal numeric for starting salinity value, PPT
#' @param outfl chr string for name of output file to save
#'
#' @import dplyr
#'
#' @return Nothing
getsalt <- function(dxdyin = 'EFDC/dxdy.inp', sig = 5,  sal = 23, outfl = 'EFDC/SALT.INP'){
# import dxdy file
dxdy <- readLines(dxdyin)
# get i, j
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
select(I, J)
# salt matrix
salt <- matrix(nrow = nrow(dxdy), ncol = sig, sal)
# headers
hds <- c(
'C       SALT.inp      PENSACOLA BAY      PPT',
'C',
'C              I       J       Lay 1   Lay 2   Lay 3   Lay 4   Lay 5   Lay 6   Lay 7   Lay 8   Lay 9   Lay 10',
'C'
)
# combine
out <- cbind(dxdy, salt) %>%
rbind(rep('', 2 + sig), .) %>%
rownames_to_column(.) %>%
apply(., 1, paste, collapse = '\t') %>%
unlist %>%
c(hds, .)
# save
writeLines(out, outfl)
}
getsalt()
getsalt(sal = 124123)
getsalt()
