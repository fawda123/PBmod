geom_tile() +
mythm +
coord_equal(ratio = 1) +
scale_fill_distiller(palette = 'Spectral')
p
plot(grd)
writeShapeSpatial(grd, 'M:/GIS/EFCF/pg_grd_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFCF/pg_grd_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grd_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grd_new.shp')
grd@proj4string
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp')
grd@proj4string
?writeSpatialShape
head(grd@data)
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83')
)
plot(grd)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83'))
deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grid_new2.shp')
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83'))
grd@proj4string
library(rgdal)
?writeOGR
writeOGRgrd(td, 'M:/GIS/EFDC/pb_grid_new2.shp', driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2' driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2', driver="ESRI Shapefile")
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
writeSpatialShape(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', proj4string = CRS('+proj=utm +zone=16 +datum=NAD83'))
writeOGR(grd, 'M:/GIS/EFDC/pb_grid_new2.shp', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
grd <- readShapeSpatial('M:/GIS/EFDC/pb_grid_new.shp', proj4string = CRS('+proj=utm +zone=16 +datum=WGS84'))
?readOGR
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
class(grd)
grd@proj4string
writeOGR(grd, 'M:/GIS/EFDC', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
library(tidyverse)
library(raster)
library(rgdal)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
rst <- raster('M:/GIS/EFDC/pb_gom_full')
# shapefile exported from cvl grid
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
# extract depths for each efdc grid cell from the depth raster
deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
# add the depths to spatial polygons data frame
grd@data <- mutate(data.frame(grd),
depth = tmp[,1]
)
# write file
writeOGR(grd, 'M:/GIS/EFDC', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
# add the depths to spatial polygons data frame
grd@data <- mutate(data.frame(grd),
depth = deps[,1]
)
writeOGR(grd, 'M:/GIS/EFDC', 'pb_grid_new2', driver="ESRI Shapefile", overwrite_layer = T)
save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
pg_grid <- grd
save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
deps <- dplyr::select(pb_grid@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
pb_grid <- grd
save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
deps <- dplyr::select(pb_grid@data, L, depth) %>%
rename(id = L) %>%
mutate(id = as.character(id))
toplo <- fortify(grd, region = 'L') %>%
left_join(deps, by = 'id')
lxly <- readLines('EFDC/lxly.inp')
head(lxly)
grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
head(grd)
head(grd@data)
head(pb_grid@data)
head(lxly)
lxlyhd <- lxly[1:4]
lxly <- readLines('EFDC/lxly.inp')
lxlyhd <- lxly[1:4]
lxly <- lxly %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
lxly <- readLines('EFDC/lxly.inp')
lxlyhd <- lxly[1:4]
lxly <- lxly[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
head(lxly)
dxdy <- readLines('EFDC/dxdy.inp')
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxly[1:3]
dxdy <- dxdy[-c(1:3)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
dxdyhd <- dxdy[1:3]
dxdy <- dxdy[-c(1:3)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:3]
dxdy <- dxdy[-c(1:3)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
head(dxdy)
dim(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .)
dimdxdy)
dim(dxdy)
dim(pb_grid@data)
head((pb_grid@data))
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame %>%
rename(
I = V2,
J = V3
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame
head(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid@data)
str(dxdy)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
as.data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
head(dxdy)
str(dxdy)
data(pb_grid)
pb_grid <- pb_grid@data %>%
select(I, J, depths) %>%
mutate(
I = as.character(I),
J = as.character(J),
depths = as.character(depths)
)
data(pb_grid)
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depths) %>%
mutate(
I = as.character(I),
J = as.character(J),
depths = as.character(depths)
)
data(pb_grid)
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
head(pb_grid)
library(tidyverse)
library(raster)
library(rgdal)
######
# estimate average depth in each ij grid cel for EFDC grid
# # bathymetry raster, created manually in arcgis
# rst <- raster('M:/GIS/EFDC/pb_gom_full')
#
# # shapefile exported from cvl grid
# grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
#
# # extract depths for each efdc grid cell from the depth raster
# deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
#
# # add the depths to spatial polygons data frame
# grd@data <- mutate(data.frame(grd),
#   depth = deps[,1]
# )
#
# # save
# pb_grid <- grd
# save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
head(dxdy)
#
deps <- dplyr::select(dxdy, I, J)
str(deps)
str(dxdy)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., deps, by = c('I', 'J'))
head(deps)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(Deps)
head(deps)
head(pb_grid)
pb_grid <- pb_grid@data
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data
head(pb_grid)
head(dxdy)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
View(pb_grid)
View(dxdy)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = as.character(I),
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(deps)
View(deps)
dim(deps)
dim(dxdy)
dim(pb_grid)
head(pb_grid)
pb_grid(depth)
pb_grid$depth
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth)
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth)
head(pb_grid)
range(pb_grid$i)
str(pb_grid)
range(pb_grid$I)
range(dxdy$I)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
) %>%
mutate(
I = as.numeric(I),
J = as.numeric(J)
)
head(dxdy)
range(dxdy$I)
range(dxdy$J)
range(pb_grid$I)
range(pb_grid$J)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I,
I = as.character(I),
J = 2 + J,
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
data(pb_grid)
# format depth data
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I,
I = as.character(I),
J = 2 + J,
J = as.character(J),
depth = as.character(depth)
)
dxdy <- readLines('EFDC/dxdy.inp')
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
#
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
head(deps)
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
str(deps)
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(deps = as.numeric(deps))
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(depth = as.numeric(depth))
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point()
str(deps)
ggplot(deps, aes(x = J, y = I)) +
geom_point()
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J')) %>%
mutate(
I = as.numeric(I),
J = as.numeric(J),
depth = as.numeric(depth)
)
ggplot(deps, aes(x = J, y = I)) +
geom_point()
ggplot(deps, aes(x = J, y = I)) +
geom_point() +
scale_y_reverse()
ggplot(deps, aes(x = J, y = I, fill = depth)) +
geom_point() +
scale_y_reverse()
ggplot(deps, aes(x = J, y = I, colour = depth)) +
geom_point() +
scale_y_reverse() +
scale_colour_distiller(palette = 'Set3')
ggplot(deps, aes(x = J, y = I, colour = depth)) +
geom_point() +
scale_y_reverse() +
scale_colour_distiller(palette = 'Set2')
head(dxdy)
library(tidyverse)
library(raster)
library(rgdal)
######
# estimate average depth in each ij grid cel for EFDC grid
# # bathymetry raster, created manually in arcgis
# rst <- raster('M:/GIS/EFDC/pb_gom_full')
#
# # shapefile exported from cvl grid
# grd <- readOGR(dsn="M:/GIS/EFDC", layer="pb_grid_new")
#
# # extract depths for each efdc grid cell from the depth raster
# deps <- extract(rst, grd, fun = mean, na.rm = TRUE)
#
# # add the depths to spatial polygons data frame
# grd@data <- mutate(data.frame(grd),
#   depth = deps[,1]
# )
#
# # save
# pb_grid <- grd
# save(pb_grid, file = 'data/pb_grid.RData', compress = 'xz')
data(pb_grid)
# format depth data from shapefile
pb_grid <- pb_grid@data %>%
dplyr::select(I, J, depth) %>%
mutate(
I = 2 + I, # I is shifted in shapeifle
I = as.character(I),
J = 2 + J, # J is shifted in shapefile
J = as.character(J),
depth = as.character(depth)
)
# import dxdy file with no depth data
dxdy <- readLines('EFDC/dxdy.inp')
# format for merge
dxdyhd <- dxdy[1:4]
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3
)
# arrange depths in pb_grid by i, j valeus in dxdy
deps <- dplyr::select(dxdy, I, J) %>%
left_join(., pb_grid, by = c('I', 'J'))
# fill depths in dxdy with the values in deps, correct order
# first column is depht, second is bottom depth (negative)
dxdy$X6 <- deps$depth
dxdy$X7 <- paste0('-', deps$depth)
head(dxdy)
dxdy <- apply(dxdy, 1, paste, collapse = '  ')
dxdy
dxdy <- c(dxdyhd, dxdy)
head(dxdy)
writeLines(dxdy, 'EFDC/dxdydep.inp')
# import dxdy file with no depth data
dxdy <- readLines('EFDC/dxdydep.inp')
# format for merge
dxdy <- dxdy[-c(1:4)] %>%
strsplit(., '\\s+') %>%
do.call('rbind', .) %>%
data.frame(stringsAsFactors = F) %>%
rename(
I = X2,
J = X3,
Depth = X6
) %>%
mutate(
I = as.numeric(I),
J = ax.numeric(J),
Depth = as.numeric(Depth)
)
